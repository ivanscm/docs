Начало работы
*************

.[perex]
Познакомтесь с фреймворком Nette и создайте свое первое приложение.

Самое первое что необходимо вам сделать, это проверить, подходит ли ваш сервер под требования фреймворка Nette. Вероятно все подходит, но мы должны убедится в том что все работает корректно.

Вы можете скачать фреймворк Nette [вручную |www:download], но рекомендуется начать новый проект с использованием [Composer |/composer]. Если вы не знаете Composer, начните с него. Это действительно просто и полезный инструмент, посмотрите это [в его документации |http://getcomposer.org/doc/].

С Composer вы можете легко скачать и установить каркас приложения, включающий в себя фреймворк Nette, называемый Web Project. Для этого перейдите в каталог вашего вебсервера (т.е. `/var/www` или `C:\InetPub`) и в командной строке выполните следующую команду:

/--
composer create-project nette/web-project nette-blog
\--

Web Project будет скачан и распакован в каталог `nette-blog`.

.[note]
Если вы не можете использовать Composer, [скачайте |https://github.com/nette/web-project/archive/full.zip] и распакуйте архив в корневую директорию веб-сервера и переименуйте каталог в `nette-blog`. Все необходимое для работы фреймворка находится в каталоге `vendor`.

Если вы разрабатываете на  Mac OS X или Linux (или другая основанная на Unix система), необходимо настроить права на запись для веб-сервера.

/--
cd nette-blog && chmod -R a+rw temp log
\--

.[note]
На некоторых Linux системах (Fedora, CentOS, ...), SELinux может быть включен по умолчанию. Возможно вам придется обновить политики SELinux, или настроить правильные контексты безопасности для каталогов temp и log.

Домашняя страница
====

В текущий момент можно запустить страницу приветствия. Откройте браузер и перейдите на следующий URL:

/--
http://localhost/nette-blog/www/
\--

и вы должны увидеть приветственную страницу фреймворка Nette:

[* welcome-620.jpg *]

Приложение работает и теперь вы можете начать вносить изменения в него.


Содержимое проекта
====

Веб-проект имеет следующую структуру:

/--pre
<b>www/</b>                      ← корневая каталог веб-сервера
└── <b>nette-blog/</b>
    ├── <b>app/</b>              ← каталог приложения
    │   ├── <b>config/</b>       ← файлы конфигурации
    │   ├── <b>presenters/</b>   ← классы презенторов
    │   │   └── <b>templates/</b>← шаблоны
    │   ├── <b>router/</b>       ← конфигурация адресов URL
    │   └── <b>bootstrap.php</b> ← загрузочный файл
    ├── <b>log/</b>              ← здесь можно найти логи сообщений об ошибках
    ├── <b>temp/</b>             ← содержит временные файлы (кеш, сессии, другое.)
    │
    ├── <b>vendor/</b>           ← библиотеки для вашего приложения
    │   └── <b>nette/</b>        ← вот ваш любимый фреймворк :-)
    │
    └── <b>www/</b>              ← локальный каталог веб-сервера - только этот каталог доступен из вне
\--

В каталоге `www` предполагается хранить изображения, скрипты JavaScript, CSS и другие файлы для публичного доступа. This is the only directory directly accessible from the browser, so you can point the root directory of your web server here (you can configure it in Apache, but let’s do it later as it’s not important right now).

Самый важный каталог для вас, это `app/`. Здесь вы можете найти файл `bootstrap.php` который загружает фреймворк и настраивает приложение. В нем активируется [автозагрузка |/auto-loading], настраивается [отладчик |tracy:] и [роутинг |/routing].



Чистка
======

Проект содержит страницу приветствия, можете удалить файл `app/presenters/templates/Homepage/default.latte` или вставить текст "Hello world!".


[* quick-hello.png *]


Tracy (отладчик)
=====

Очень важным инструментом для разработки является [отладчик под названием Tracy |tracy:]. Попробуйте сделать ошибки в файле `app/presenters/HomepagePresenter.php` (например удалить ключевое слово `class` в коде) и посмотрите что произойдет. Появится красная страница с понятным описанием ошибки.

[* debugger-620.png .(debugger screen) *]

Tracy хорошо поможет избежать ошибок. Также обратите внимание на плавающую панель отладчика в нижнем правом углу, которая информирует вас о важных деталях во время выполнения приложения.

[* quick-tracy-info.png *]

В рабочем режиме Tracy отлючен и не раскрывает конфиденциальную информацию. Все ошибки сохраняются в каталог `log/`. Просто попробуйте. В файле `app/bootstrap.php`, найдите следующий фрагмент кода, раскомментируйте строку и измените параметр вызова метода на `FALSE`, что бы выглядело вот так:

/--php
// Enable Nette Debugger for error visualization & logging
$configurator->setDebugMode(FALSE);
$configurator->enableTracy(__DIR__ . '/../log');
\--

После обновления страницы красная страница будет заменена удобным для пользователя сообщением:

[* server-error-620.png .(error screen) *]

Теперь посмотрите в каталог `log/`. Вы найдете там журнал ошибок (в файле exception.log) а также страницу с сообщением об ошибке (сохраненное в файле HTML, с именем начинающимся с `exception`).

Закомментируйте строку `// $configurator->setDebugMode(FALSE);` снова. Tracy автоматически включает режим отладки для `localhost` и выключает в другой среде.

Теперь вы можете исправить ошибку и продолжить разработку приложения.
